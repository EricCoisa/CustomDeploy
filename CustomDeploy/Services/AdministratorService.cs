using System.ComponentModel;
using System.Diagnostics;
using System.Security.Principal;

namespace CustomDeploy.Services
{
    /// <summary>
    /// Servi√ßo para gerenciamento de privil√©gios de administrador
    /// </summary>
    public class AdministratorService
    {
        private readonly ILogger<AdministratorService> _logger;

        public AdministratorService(ILogger<AdministratorService> logger)
        {
            _logger = logger;
        }

        /// <summary>
        /// Verifica se a aplica√ß√£o est√° executando com privil√©gios de administrador
        /// </summary>
        /// <returns>True se for administrador, False caso contr√°rio</returns>
        public bool IsRunningAsAdministrator()
        {
            try
            {
                if (!OperatingSystem.IsWindows())
                {
                    _logger.LogWarning("Verifica√ß√£o de administrador dispon√≠vel apenas no Windows");
                    return false;
                }

                using var identity = WindowsIdentity.GetCurrent();
                var principal = new WindowsPrincipal(identity);
                var isAdmin = principal.IsInRole(WindowsBuiltInRole.Administrator);
                
                _logger.LogDebug("Verifica√ß√£o de privil√©gios de administrador: {IsAdmin}", isAdmin);
                return isAdmin;
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Erro ao verificar privil√©gios de administrador");
                return false;
            }
        }

        /// <summary>
        /// Tenta reiniciar a aplica√ß√£o com privil√©gios de administrador
        /// </summary>
        /// <returns>Tuple indicando sucesso e mensagem</returns>
        public (bool Success, string Message) RequestAdministratorRestart()
        {
            try
            {
                if (!OperatingSystem.IsWindows())
                {
                    var message = "Eleva√ß√£o de privil√©gios dispon√≠vel apenas no Windows";
                    _logger.LogWarning(message);
                    return (false, message);
                }

                if (IsRunningAsAdministrator())
                {
                    return (true, "Aplica√ß√£o j√° est√° executando com privil√©gios de administrador");
                }

                var currentProcess = Process.GetCurrentProcess();
                var executablePath = currentProcess.MainModule?.FileName ?? Environment.ProcessPath;
                
                if (string.IsNullOrEmpty(executablePath))
                {
                    return (false, "N√£o foi poss√≠vel determinar o caminho do execut√°vel");
                }

                var startInfo = new ProcessStartInfo
                {
                    FileName = executablePath,
                    UseShellExecute = true,
                    Verb = "runas", // Solicita eleva√ß√£o
                    Arguments = string.Join(" ", Environment.GetCommandLineArgs().Skip(1).Select(arg => $"\"{arg}\""))
                };

                _logger.LogInformation("Solicitando reinicializa√ß√£o como administrador: {ExecutablePath}", executablePath);

                Process.Start(startInfo);
                
                // Agenda o fechamento da aplica√ß√£o atual
                Task.Delay(2000).ContinueWith(_ => Environment.Exit(0));
                
                return (true, "Solicita√ß√£o de eleva√ß√£o enviada. A aplica√ß√£o ser√° reiniciada com privil√©gios de administrador.");
            }
            catch (Win32Exception ex) when (ex.NativeErrorCode == 1223)
            {
                // Usu√°rio cancelou o UAC (User Account Control)
                _logger.LogWarning("Usu√°rio cancelou a solicita√ß√£o de eleva√ß√£o de privil√©gios");
                return (false, "Opera√ß√£o cancelada pelo usu√°rio. Privil√©gios de administrador s√£o necess√°rios para gerenciar IIS.");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao tentar reiniciar como administrador");
                return (false, $"Erro ao tentar reiniciar como administrador: {ex.Message}");
            }
        }

        /// <summary>
        /// Solicita eleva√ß√£o de privil√©gios para a inst√¢ncia atual sem reiniciar
        /// </summary>
        /// <returns>Tuple indicando sucesso e mensagem</returns>
        public (bool Success, string Message) RequestElevationForCurrentInstance()
        {
            try
            {
                if (!OperatingSystem.IsWindows())
                {
                    var message = "Eleva√ß√£o de privil√©gios dispon√≠vel apenas no Windows";
                    _logger.LogWarning(message);
                    return (false, message);
                }

                if (IsRunningAsAdministrator())
                {
                    return (true, "Aplica√ß√£o j√° est√° executando com privil√©gios de administrador");
                }

                _logger.LogWarning("ATEN√á√ÉO: Para gerenciar IIS √© necess√°rio privil√©gios de administrador");
                _logger.LogInformation("A aplica√ß√£o atual n√£o possui privil√©gios de administrador");
                
                return (false, "Para utilizar funcionalidades IIS, √© necess√°rio executar a aplica√ß√£o como Administrador. Use o endpoint /iis/request-admin para reiniciar automaticamente ou execute manualmente como administrador.");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao verificar privil√©gios de administrador");
                return (false, $"Erro ao verificar privil√©gios: {ex.Message}");
            }
        }

        /// <summary>
        /// Obt√©m instru√ß√µes detalhadas para executar como administrador
        /// </summary>
        /// <returns>Lista de instru√ß√µes passo-a-passo</returns>
        public List<string> GetAdministratorInstructions()
        {
            var instructions = new List<string>();

            try
            {
                var currentProcess = Process.GetCurrentProcess();
                var executablePath = currentProcess.MainModule?.FileName ?? "aplica√ß√£o";
                var executableName = Path.GetFileName(executablePath);

                instructions.Add("üîê Para executar como Administrador:");
                instructions.Add("");
                instructions.Add("üìã M√©todo 1 - Reiniciar Automaticamente:");
                instructions.Add("‚Ä¢ Use o endpoint POST /iis/request-admin para reiniciar automaticamente");
                instructions.Add("‚Ä¢ A aplica√ß√£o solicitar√° permiss√µes UAC e reiniciar√°");
                instructions.Add("");
                instructions.Add("üìã M√©todo 2 - Manual:");
                instructions.Add("‚Ä¢ 1. Feche esta aplica√ß√£o completamente");
                instructions.Add($"‚Ä¢ 2. Localize o arquivo: {executableName}");
                instructions.Add("‚Ä¢ 3. Clique com o bot√£o DIREITO no arquivo");
                instructions.Add("‚Ä¢ 4. Selecione 'Executar como administrador'");
                instructions.Add("‚Ä¢ 5. Clique 'Sim' quando aparecer o controle de conta de usu√°rio (UAC)");
                instructions.Add("");
                instructions.Add("üìã M√©todo 3 - Via Prompt de Comando:");
                instructions.Add("‚Ä¢ 1. Abra o Prompt de Comando como Administrador");
                instructions.Add("‚Ä¢ 2. Navegue at√© a pasta da aplica√ß√£o");
                instructions.Add($"‚Ä¢ 3. Execute: {executableName}");
                instructions.Add("");
                instructions.Add("‚ö†Ô∏è Importante:");
                instructions.Add("‚Ä¢ Privil√©gios de administrador s√£o OBRIGAT√ìRIOS para gerenciar IIS");
                instructions.Add("‚Ä¢ A aplica√ß√£o n√£o funcionar√° corretamente sem esses privil√©gios");
                instructions.Add("‚Ä¢ Esta verifica√ß√£o garante que todas as opera√ß√µes IIS funcionem adequadamente");

                _logger.LogDebug("Instru√ß√µes de administrador geradas para: {ExecutablePath}", executablePath);
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Erro ao gerar instru√ß√µes de administrador");
                instructions.Add("‚ùå Erro ao gerar instru√ß√µes espec√≠ficas");
                instructions.Add("‚Ä¢ Execute a aplica√ß√£o como Administrador");
                instructions.Add("‚Ä¢ Clique com bot√£o direito > 'Executar como administrador'");
            }

            return instructions;
        }

        /// <summary>
        /// Verifica privil√©gios e retorna status detalhado
        /// </summary>
        /// <returns>Informa√ß√µes sobre privil√©gios e instru√ß√µes</returns>
        public (bool IsAdmin, string UserName, string Domain, List<string> Instructions) GetPrivilegeStatus()
        {
            try
            {
                if (!OperatingSystem.IsWindows())
                {
                    _logger.LogWarning("Verifica√ß√£o de privil√©gios dispon√≠vel apenas no Windows");
                    return (false, "N/A", "N/A", new List<string> { "‚ùå Funcionalidade dispon√≠vel apenas no Windows" });
                }

                var isAdmin = IsRunningAsAdministrator();
                using var identity = WindowsIdentity.GetCurrent();
                var userName = identity.Name ?? "Usu√°rio desconhecido";
                
                // Separar dom√≠nio e usu√°rio
                var userParts = userName.Split('\\');
                var domain = userParts.Length > 1 ? userParts[0] : Environment.MachineName;
                var user = userParts.Length > 1 ? userParts[1] : userName;

                var instructions = isAdmin 
                    ? new List<string> { "‚úÖ Aplica√ß√£o executando com privil√©gios de administrador", "Todas as opera√ß√µes IIS est√£o dispon√≠veis" }
                    : GetAdministratorInstructions();

                _logger.LogInformation("Status de privil√©gios: IsAdmin={IsAdmin}, User={UserName}", isAdmin, userName);

                return (isAdmin, user, domain, instructions);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao verificar status de privil√©gios");
                return (false, "Erro", "Erro", new List<string> { $"‚ùå Erro ao verificar privil√©gios: {ex.Message}" });
            }
        }
    }
}

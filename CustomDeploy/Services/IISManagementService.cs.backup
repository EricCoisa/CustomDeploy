using System.Diagnostics;
using System.Text;
using CustomDeploy.Models;
using System.Security.Principal;
using Microsoft.Web.Administration;

namespace CustomDeploy.Services
{
    public class IISManagementService
    {
        private readonly ILogger<IISManagementService> _logger;
        private readonly AdministratorService _administratorService;
        private readonly string _wwwrootPath;

        public IISManagementService(ILogger<IISManagementService> logger, AdministratorService administratorService, IConfiguration configuration)
        {
            _logger = logger;
            _administratorService = administratorService;
            _wwwrootPath = configuration.GetValue<string>("DeploySettings:PublicationsPath") 
                ?? "C:\\inetpub\\wwwroot";
        }

        /// <summary>
        /// Verifica se a aplica√ß√£o possui as permiss√µes necess√°rias para gerenciar IIS
        /// </summary>
        /// <returns>Objeto com status das permiss√µes</returns>
        public async Task<(bool Success, string Message, object Permissions)> VerifyPermissionsAsync()
        {
            _logger.LogInformation("Iniciando verifica√ß√£o de permiss√µes do IIS");

            var permissions = new
            {
                canCreateFolders = false,
                canMoveFiles = false,
                canExecuteIISCommands = false,
                details = new List<string>()
            };

            var details = new List<string>();

            try
            {
                // 1. Testar cria√ß√£o de pastas
                var testFolderPath = Path.Combine(_wwwrootPath, "temp-test");
                try
                {
                    if (Directory.Exists(testFolderPath))
                    {
                        Directory.Delete(testFolderPath, true);
                    }

                    Directory.CreateDirectory(testFolderPath);
                    permissions = permissions with { canCreateFolders = true };
                    details.Add("‚úÖ Pode criar pastas no wwwroot");
                    _logger.LogInformation("Teste de cria√ß√£o de pasta: SUCESSO");

                    // Limpar pasta de teste
                    Directory.Delete(testFolderPath, true);
                }
                catch (Exception ex)
                {
                    details.Add($"‚ùå N√£o pode criar pastas: {ex.Message}");
                    _logger.LogWarning(ex, "Teste de cria√ß√£o de pasta: FALHA");
                }

                // 2. Testar movimenta√ß√£o de arquivos
                try
                {
                    var tempDir1 = Path.Combine(Path.GetTempPath(), "iis_test_1");
                    var tempDir2 = Path.Combine(Path.GetTempPath(), "iis_test_2");
                    var testFile = Path.Combine(tempDir1, "test.txt");

                    Directory.CreateDirectory(tempDir1);
                    Directory.CreateDirectory(tempDir2);
                    
                    await File.WriteAllTextAsync(testFile, "Test file for IIS permissions");
                    
                    var targetFile = Path.Combine(tempDir2, "test.txt");
                    File.Move(testFile, targetFile);

                    permissions = permissions with { canMoveFiles = true };
                    details.Add("‚úÖ Pode mover arquivos entre pastas");
                    _logger.LogInformation("Teste de movimenta√ß√£o de arquivos: SUCESSO");

                    // Limpeza
                    Directory.Delete(tempDir1, true);
                    Directory.Delete(tempDir2, true);
                }
                catch (Exception ex)
                {
                    details.Add($"‚ùå N√£o pode mover arquivos: {ex.Message}");
                    _logger.LogWarning(ex, "Teste de movimenta√ß√£o de arquivos: FALHA");
                }

                // 3. Testar comandos IIS
                try
                {
                    var iisTestResult = await ExecuteCommandAsync("iisreset", "/status");
                    if (iisTestResult.Success)
                    {
                        permissions = permissions with { canExecuteIISCommands = true };
                        details.Add("‚úÖ Pode executar comandos IIS (iisreset /status)");
                        _logger.LogInformation("Teste de comando IIS: SUCESSO");
                    }
                    else
                    {
                        details.Add($"‚ùå N√£o pode executar comandos IIS: {iisTestResult.Message}");
                        _logger.LogWarning("Teste de comando IIS: FALHA - {Error}", iisTestResult.Message);
                    }
                }
                catch (Exception ex)
                {
                    details.Add($"‚ùå Erro ao testar comandos IIS: {ex.Message}");
                    _logger.LogWarning(ex, "Teste de comando IIS: EXCE√á√ÉO");
                }

                var finalPermissions = permissions with { details = details };

                var allPermissionsOk = finalPermissions.canCreateFolders && 
                                     finalPermissions.canMoveFiles && 
                                     finalPermissions.canExecuteIISCommands;

                var message = allPermissionsOk 
                    ? "Todas as permiss√µes necess√°rias est√£o dispon√≠veis"
                    : "Algumas permiss√µes est√£o faltando. Verifique se a aplica√ß√£o est√° executando com privil√©gios de administrador";

                return (true, message, finalPermissions);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro durante verifica√ß√£o de permiss√µes");
                return (false, $"Erro durante verifica√ß√£o: {ex.Message}", permissions with { details = details });
            }
        }

        /// <summary>
        /// Verifica permiss√µes e retorna instru√ß√µes para resolver problemas
        /// </summary>
        /// <returns>Resultado detalhado da verifica√ß√£o de permiss√µes</returns>
        public async Task<PermissionCheckResult> RequestPermissionsAsync()
        {
            _logger.LogInformation("Iniciando verifica√ß√£o detalhada de permiss√µes com instru√ß√µes");

            var result = new PermissionCheckResult();
            var appDirectory = AppContext.BaseDirectory;

            try
            {
                // 0. Verificar e solicitar privil√©gios de administrador
                var (elevationSuccess, elevationMessage) = _administratorService.RequestElevationForCurrentInstance();
                
                if (elevationSuccess)
                {
                    result.TestDetails.Add("‚úÖ Aplica√ß√£o executando como Administrador");
                    _logger.LogDebug("Verifica√ß√£o de administrador: SUCESSO");
                }
                else
                {
                    result.TestDetails.Add("‚ùå Aplica√ß√£o N√ÉO est√° executando como Administrador");
                    result.TestDetails.Add($"üí° {elevationMessage}");
                    result.Instructions.Add("üîê IMPORTANTE: Execute a aplica√ß√£o como Administrador!");
                    result.Instructions.Add("‚Ä¢ Use o endpoint POST /api/iis/request-admin para reiniciar automaticamente");
                    result.Instructions.Add("‚Ä¢ Ou feche a aplica√ß√£o e execute como administrador manualmente");
                    result.Instructions.Add("");
                    _logger.LogWarning("Verifica√ß√£o de administrador: FALHA - {Message}", elevationMessage);
                }
                // 1. Testar cria√ß√£o de diret√≥rios
                _logger.LogDebug("Testando permiss√£o para criar diret√≥rios");
                var testFolderPath = Path.Combine(appDirectory, "temp_permission_test");
                
                try
                {
                    // Limpar pasta de teste se existir
                    if (Directory.Exists(testFolderPath))
                    {
                        Directory.Delete(testFolderPath, true);
                        await Task.Delay(100); // Pequeno delay para garantir limpeza
                    }

                    // Tentar criar diret√≥rio
                    Directory.CreateDirectory(testFolderPath);
                    result.CanCreateFolders = true;
                    result.TestDetails.Add("‚úÖ Pode criar diret√≥rios na pasta da aplica√ß√£o");
                    _logger.LogDebug("Teste de cria√ß√£o de diret√≥rio: SUCESSO");

                    // Limpar ap√≥s teste
                    Directory.Delete(testFolderPath, true);
                }
                catch (UnauthorizedAccessException ex)
                {
                    result.CanCreateFolders = false;
                    result.TestDetails.Add($"‚ùå N√£o pode criar diret√≥rios: Acesso negado");
                    result.Instructions.Add("‚Ä¢ Execute a aplica√ß√£o como Administrador (clique com bot√£o direito > 'Executar como administrador')");
                    result.Instructions.Add($"‚Ä¢ Verifique permiss√µes da pasta: {appDirectory}");
                    _logger.LogWarning(ex, "Teste de cria√ß√£o de diret√≥rio: FALHA - Acesso negado");
                }
                catch (Exception ex)
                {
                    result.CanCreateFolders = false;
                    result.TestDetails.Add($"‚ùå Erro ao criar diret√≥rios: {ex.Message}");
                    result.Instructions.Add($"‚Ä¢ Verifique permiss√µes de escrita na pasta: {appDirectory}");
                    _logger.LogWarning(ex, "Teste de cria√ß√£o de diret√≥rio: FALHA");
                }

                // 2. Testar movimenta√ß√£o de arquivos
                _logger.LogDebug("Testando permiss√£o para mover arquivos");
                var tempDir1 = Path.Combine(appDirectory, "temp_move_test_1");
                var tempDir2 = Path.Combine(appDirectory, "temp_move_test_2");
                var testFile = Path.Combine(tempDir1, "test_file.txt");

                try
                {
                    // Limpar diret√≥rios de teste se existirem
                    if (Directory.Exists(tempDir1)) Directory.Delete(tempDir1, true);
                    if (Directory.Exists(tempDir2)) Directory.Delete(tempDir2, true);
                    await Task.Delay(100);

                    // Criar estrutura de teste
                    Directory.CreateDirectory(tempDir1);
                    Directory.CreateDirectory(tempDir2);
                    
                    await File.WriteAllTextAsync(testFile, $"Teste de permiss√£o - {DateTime.Now}");
                    
                    var targetFile = Path.Combine(tempDir2, "test_file.txt");
                    File.Move(testFile, targetFile);

                    result.CanMoveFiles = true;
                    result.TestDetails.Add("‚úÖ Pode mover arquivos entre diret√≥rios");
                    _logger.LogDebug("Teste de movimenta√ß√£o de arquivos: SUCESSO");

                    // Limpeza
                    Directory.Delete(tempDir1, true);
                    Directory.Delete(tempDir2, true);
                }
                catch (UnauthorizedAccessException ex)
                {
                    result.CanMoveFiles = false;
                    result.TestDetails.Add($"‚ùå N√£o pode mover arquivos: Acesso negado");
                    result.Instructions.Add("‚Ä¢ Execute a aplica√ß√£o como Administrador");
                    result.Instructions.Add("‚Ä¢ Verifique se o antiv√≠rus n√£o est√° bloqueando opera√ß√µes de arquivo");
                    _logger.LogWarning(ex, "Teste de movimenta√ß√£o de arquivos: FALHA - Acesso negado");
                }
                catch (Exception ex)
                {
                    result.CanMoveFiles = false;
                    result.TestDetails.Add($"‚ùå Erro ao mover arquivos: {ex.Message}");
                    result.Instructions.Add("‚Ä¢ Verifique permiss√µes de escrita e leitura na pasta da aplica√ß√£o");
                    _logger.LogWarning(ex, "Teste de movimenta√ß√£o de arquivos: FALHA");
                }
                finally
                {
                    // Garantir limpeza mesmo em caso de erro
                    try
                    {
                        if (Directory.Exists(tempDir1)) Directory.Delete(tempDir1, true);
                        if (Directory.Exists(tempDir2)) Directory.Delete(tempDir2, true);
                    }
                    catch { /* Ignorar erros de limpeza */ }
                }

                // 3. Testar comandos IIS
                _logger.LogDebug("Testando permiss√£o para executar comandos IIS");
                try
                {
                    var processInfo = new ProcessStartInfo
                    {
                        FileName = "cmd.exe",
                        Arguments = "/c iisreset /status",
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        UseShellExecute = false,
                        CreateNoWindow = true
                    };

                    using var process = new Process { StartInfo = processInfo };
                    process.Start();

                    var output = await process.StandardOutput.ReadToEndAsync();
                    var error = await process.StandardError.ReadToEndAsync();
                    
                    await process.WaitForExitAsync();

                    if (process.ExitCode == 0)
                    {
                        result.CanExecuteIISCommands = true;
                        result.TestDetails.Add("‚úÖ Pode executar comandos IIS (iisreset /status)");
                        _logger.LogDebug("Teste de comando IIS: SUCESSO");
                    }
                    else
                    {
                        result.CanExecuteIISCommands = false;
                        result.TestDetails.Add($"‚ùå Comando IIS falhou (c√≥digo: {process.ExitCode})");
                        
                        if (error.Contains("Access is denied") || error.Contains("Acesso negado"))
                        {
                            result.Instructions.Add("‚Ä¢ Execute a aplica√ß√£o como Administrador para gerenciar IIS");
                            result.Instructions.Add("‚Ä¢ Verifique se o IIS est√° instalado e em execu√ß√£o");
                        }
                        else
                        {
                            result.Instructions.Add("‚Ä¢ Verifique se o IIS est√° instalado no sistema");
                            result.Instructions.Add("‚Ä¢ Instale o m√≥dulo 'IIS Management Console' se necess√°rio");
                        }
                        
                        _logger.LogWarning("Teste de comando IIS: FALHA - C√≥digo: {ExitCode}, Error: {Error}", 
                            process.ExitCode, error);
                    }
                }
                catch (Exception ex)
                {
                    result.CanExecuteIISCommands = false;
                    result.TestDetails.Add($"‚ùå Erro ao executar comando IIS: {ex.Message}");
                    result.Instructions.Add("‚Ä¢ Execute a aplica√ß√£o como Administrador");
                    result.Instructions.Add("‚Ä¢ Verifique se o IIS est√° instalado e configurado");
                    result.Instructions.Add("‚Ä¢ Certifique-se de que o Windows Feature 'IIS Management Console' est√° habilitado");
                    _logger.LogWarning(ex, "Teste de comando IIS: EXCE√á√ÉO");
                }

                // 4. Adicionar instru√ß√µes gerais se houver falhas
                if (!result.AllPermissionsGranted)
                {
                    result.Instructions.Add("");
                    result.Instructions.Add("üìã Instru√ß√µes Gerais:");
                    result.Instructions.Add("‚Ä¢ Feche a aplica√ß√£o completamente");
                    result.Instructions.Add("‚Ä¢ Clique com bot√£o direito no execut√°vel > 'Executar como administrador'");
                    result.Instructions.Add("‚Ä¢ Verifique se o IIS est√° instalado (Control Panel > Programs > Turn Windows features on/off > IIS)");
                    result.Instructions.Add("‚Ä¢ Desabilite temporariamente o antiv√≠rus se necess√°rio");
                }
                else
                {
                    result.Instructions.Add("‚úÖ Todas as permiss√µes necess√°rias est√£o dispon√≠veis!");
                    result.Instructions.Add("A aplica√ß√£o pode gerenciar sites IIS sem problemas.");
                }

                _logger.LogInformation("Verifica√ß√£o de permiss√µes conclu√≠da. CanCreateFolders: {CanCreateFolders}, CanMoveFiles: {CanMoveFiles}, CanExecuteIIS: {CanExecuteIISCommands}", 
                    result.CanCreateFolders, result.CanMoveFiles, result.CanExecuteIISCommands);

                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro durante verifica√ß√£o detalhada de permiss√µes");
                
                result.CanCreateFolders = false;
                result.CanMoveFiles = false;
                result.CanExecuteIISCommands = false;
                result.TestDetails.Add($"‚ùå Erro cr√≠tico durante verifica√ß√£o: {ex.Message}");
                result.Instructions.Add("‚Ä¢ Execute a aplica√ß√£o como Administrador");
                result.Instructions.Add("‚Ä¢ Verifique se h√° conflitos com antiv√≠rus ou firewall");
                result.Instructions.Add("‚Ä¢ Contate o suporte t√©cnico se o problema persistir");

                return result;
            }
        }

        /// <summary>
        /// Cria um novo site no IIS com AppPool associado
        /// </summary>
        /// <param name="siteName">Nome do site</param>
        /// <param name="port">Porta do site</param>
        /// <param name="physicalPath">Caminho f√≠sico do site</param>
        /// <param name="appPool">Nome do Application Pool</param>
        /// <returns>Resultado da opera√ß√£o</returns>
        public async Task<(bool Success, string Message, object? Details)> CreateSiteAsync(
            string siteName, 
            int port, 
            string physicalPath, 
            string appPool)
        {
            _logger.LogInformation("Iniciando cria√ß√£o do site IIS: {SiteName}, Porta: {Port}, Path: {PhysicalPath}, AppPool: {AppPool}", 
                siteName, port, physicalPath, appPool);

            var operationLog = new List<string>();

            try
            {
                // Valida√ß√µes b√°sicas
                if (string.IsNullOrWhiteSpace(siteName))
                {
                    return (false, "Nome do site √© obrigat√≥rio", null);
                }

                if (port <= 0 || port > 65535)
                {
                    return (false, "Porta deve estar entre 1 e 65535", null);
                }

                if (string.IsNullOrWhiteSpace(physicalPath))
                {
                    return (false, "Caminho f√≠sico √© obrigat√≥rio", null);
                }

                if (string.IsNullOrWhiteSpace(appPool))
                {
                    return (false, "Nome do Application Pool √© obrigat√≥rio", null);
                }

                // Verificar se o diret√≥rio f√≠sico existe
                if (!Directory.Exists(physicalPath))
                {
                    _logger.LogInformation("Diret√≥rio n√£o existe, criando: {PhysicalPath}", physicalPath);
                    try
                    {
                        Directory.CreateDirectory(physicalPath);
                        operationLog.Add($"‚úÖ Diret√≥rio criado: {physicalPath}");
                    }
                    catch (Exception ex)
                    {
                        operationLog.Add($"‚ùå Erro ao criar diret√≥rio: {ex.Message}");
                        return (false, $"N√£o foi poss√≠vel criar o diret√≥rio: {ex.Message}", 
                            new { operationLog });
                    }
                }
                else
                {
                    operationLog.Add($"‚úÖ Diret√≥rio j√° existe: {physicalPath}");
                }

                // 1. Verificar se o AppPool j√° existe
                var appPoolExistsResult = await ExecuteCommandAsync("powershell", 
                    $"-Command \"Get-IISAppPool -Name '{appPool}' -ErrorAction SilentlyContinue\"");

                if (!appPoolExistsResult.Success || string.IsNullOrWhiteSpace(appPoolExistsResult.Output))
                {
                    // 2. Criar Application Pool
                    _logger.LogInformation("Criando Application Pool: {AppPool}", appPool);
                    var createAppPoolResult = await ExecuteCommandAsync("powershell", 
                        $"-Command \"New-IISAppPool -Name '{appPool}' -Force\"");

                    if (createAppPoolResult.Success)
                    {
                        operationLog.Add($"‚úÖ Application Pool criado: {appPool}");
                        _logger.LogInformation("Application Pool criado com sucesso: {AppPool}", appPool);
                    }
                    else
                    {
                        operationLog.Add($"‚ùå Erro ao criar Application Pool: {createAppPoolResult.Message}");
                        return (false, $"Falha ao criar Application Pool: {createAppPoolResult.Message}", 
                            new { operationLog });
                    }
                }
                else
                {
                    operationLog.Add($"‚úÖ Application Pool j√° existe: {appPool}");
                    _logger.LogInformation("Application Pool j√° existe: {AppPool}", appPool);
                }

                // 3. Verificar se a porta j√° est√° em uso
                var portCheckResult = await ExecuteCommandAsync("powershell", 
                    $"-Command \"Get-IISSite | Where-Object {{ $_.Bindings.bindingInformation -like '*:{port}:*' }}\"");

                if (portCheckResult.Success && !string.IsNullOrWhiteSpace(portCheckResult.Output))
                {
                    operationLog.Add($"‚ùå Porta {port} j√° est√° em uso por outro site");
                    return (false, $"Porta {port} j√° est√° em uso por outro site", new { operationLog });
                }

                // 4. Verificar se o site j√° existe
                var siteExistsResult = await ExecuteCommandAsync("powershell", 
                    $"-Command \"Get-IISSite -Name '{siteName}' -ErrorAction SilentlyContinue\"");

                if (siteExistsResult.Success && !string.IsNullOrWhiteSpace(siteExistsResult.Output))
                {
                    operationLog.Add($"‚ùå Site j√° existe: {siteName}");
                    return (false, $"Site '{siteName}' j√° existe", new { operationLog });
                }

                // 5. Criar o site
                _logger.LogInformation("Criando site IIS: {SiteName}", siteName);
                var createSiteResult = await ExecuteCommandAsync("powershell", 
                    $"-Command \"New-IISSite -Name '{siteName}' -PhysicalPath '{physicalPath}' -Port {port} -ApplicationPool '{appPool}'\"");

                if (createSiteResult.Success)
                {
                    operationLog.Add($"‚úÖ Site criado com sucesso: {siteName}");
                    _logger.LogInformation("Site IIS criado com sucesso: {SiteName}", siteName);

                    var details = new
                    {
                        siteName,
                        port,
                        physicalPath,
                        appPool,
                        operationLog,
                        createdAt = DateTime.UtcNow
                    };

                    return (true, $"Site '{siteName}' criado com sucesso na porta {port}", details);
                }
                else
                {
                    operationLog.Add($"‚ùå Erro ao criar site: {createSiteResult.Message}");
                    return (false, $"Falha ao criar site: {createSiteResult.Message}", new { operationLog });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro durante cria√ß√£o do site IIS: {SiteName}", siteName);
                operationLog.Add($"‚ùå Exce√ß√£o durante cria√ß√£o: {ex.Message}");
                return (false, $"Erro interno durante cria√ß√£o do site: {ex.Message}", new { operationLog });
            }
        }

        /// <summary>
        /// Executa um comando no sistema operacional
        /// </summary>
        /// <param name="fileName">Nome do execut√°vel</param>
        /// <param name="arguments">Argumentos do comando</param>
        /// <returns>Resultado da execu√ß√£o</returns>
        private async Task<(bool Success, string Message, string Output)> ExecuteCommandAsync(string fileName, string arguments)
        {
            try
            {
                _logger.LogDebug("Executando comando: {FileName} {Arguments}", fileName, arguments);

                var processInfo = new ProcessStartInfo
                {
                    FileName = fileName,
                    Arguments = arguments,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                using var process = new Process { StartInfo = processInfo };
                
                var outputBuilder = new StringBuilder();
                var errorBuilder = new StringBuilder();

                process.OutputDataReceived += (sender, args) =>
                {
                    if (args.Data != null)
                    {
                        outputBuilder.AppendLine(args.Data);
                    }
                };

                process.ErrorDataReceived += (sender, args) =>
                {
                    if (args.Data != null)
                    {
                        errorBuilder.AppendLine(args.Data);
                    }
                };

                process.Start();
                process.BeginOutputReadLine();
                process.BeginErrorReadLine();

                await process.WaitForExitAsync();

                var output = outputBuilder.ToString();
                var error = errorBuilder.ToString();

                _logger.LogDebug("Comando executado. ExitCode: {ExitCode}, Output: {Output}, Error: {Error}", 
                    process.ExitCode, output, error);

                if (process.ExitCode == 0)
                {
                    return (true, "Comando executado com sucesso", output);
                }
                else
                {
                    var errorMessage = !string.IsNullOrEmpty(error) ? error : output;
                    return (false, $"Comando falhou (c√≥digo: {process.ExitCode}): {errorMessage}", output);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao executar comando: {FileName} {Arguments}", fileName, arguments);
                return (false, ex.Message, string.Empty);
            }
        }

        /// <summary>
        /// Obt√©m informa√ß√µes de um site IIS pelo nome
        /// </summary>
        /// <param name="siteName">Nome do site</param>
        /// <returns>Resultado com informa√ß√µes do site</returns>
        public async Task<(bool Success, string Message, string PhysicalPath, object? SiteInfo)> GetSiteInfoAsync(string siteName)
        {
            _logger.LogInformation("Obtendo informa√ß√µes do site IIS: {SiteName}", siteName);

            try
            {
                if (string.IsNullOrWhiteSpace(siteName))
                {
                    return (false, "Nome do site √© obrigat√≥rio", string.Empty, null);
                }

                // Criar script PowerShell para obter informa√ß√µes do site
                var tempScriptPath = Path.Combine(Path.GetTempPath(), $"get_site_info_{Guid.NewGuid()}.ps1");
                var powershellScript = $@"
$site = Get-IISSite -Name '{siteName}' -ErrorAction SilentlyContinue

if (-not $site) {{
    Write-Output ""SITE_NOT_FOUND""
    exit 1
}}

$physicalPath = 'Path Not Available'
$state = [int]$site.State
$id = [int]$site.Id

try {{
    $rootApp = $site.Applications | Where-Object {{ $_.Path -eq '/' }} | Select-Object -First 1
    if ($rootApp) {{
        $rootVDir = $rootApp.VirtualDirectories | Where-Object {{ $_.Path -eq '/' }} | Select-Object -First 1
        if ($rootVDir -and $rootVDir.PhysicalPath) {{
            $physicalPath = $rootVDir.PhysicalPath
        }}
    }}
}} catch {{
    # Keep default value
}}

$siteInfo = [PSCustomObject]@{{
    Name = $site.Name
    Id = $id
    State = $state
    PhysicalPath = $physicalPath
    Applications = @($site.Applications | ForEach-Object {{ $_.Path }})
    Bindings = @($site.Bindings | ForEach-Object {{ ""[$($_.Protocol)] $($_.BindingInformation)"" }})
}}

$siteInfo | ConvertTo-Json -Depth 2 -Compress
";

                try
                {
                    // Escrever script tempor√°rio
                    await File.WriteAllTextAsync(tempScriptPath, powershellScript);
                    
                    // Executar script
                    var siteInfoResult = await ExecuteCommandAsync("powershell", 
                        $"-ExecutionPolicy Bypass -File \"{tempScriptPath}\"");

                    if (!siteInfoResult.Success)
                    {
                        return (false, $"Erro ao obter informa√ß√µes do site: {siteInfoResult.Message}", string.Empty, null);
                    }

                    if (string.IsNullOrWhiteSpace(siteInfoResult.Output))
                    {
                        return (false, $"Site '{siteName}' n√£o encontrado no IIS", string.Empty, null);
                    }

                    if (siteInfoResult.Output.Contains("SITE_NOT_FOUND"))
                    {
                        return (false, $"Site '{siteName}' n√£o encontrado no IIS", string.Empty, null);
                    }

                    try
                    {
                        var siteJson = System.Text.Json.JsonSerializer.Deserialize<System.Text.Json.JsonElement>(siteInfoResult.Output);
                        
                        var physicalPath = siteJson.TryGetProperty("PhysicalPath", out var pathProp) ? 
                            pathProp.GetString() ?? string.Empty : string.Empty;

                        if (string.IsNullOrEmpty(physicalPath) || physicalPath == "Path Not Available")
                        {
                            return (false, $"N√£o foi poss√≠vel obter o caminho f√≠sico do site '{siteName}'", string.Empty, null);
                        }

                        var siteInfo = new
                        {
                            name = siteJson.TryGetProperty("Name", out var nameProp) ? nameProp.GetString() : siteName,
                            id = siteJson.TryGetProperty("Id", out var idProp) ? idProp.GetInt32() : 0,
                            state = siteJson.TryGetProperty("State", out var stateProp) ? stateProp.GetInt32() : 0,
                            physicalPath = physicalPath,
                            applications = siteJson.TryGetProperty("Applications", out var appsProp) && appsProp.ValueKind == System.Text.Json.JsonValueKind.Array ?
                                appsProp.EnumerateArray().Select(app => app.GetString() ?? "").Where(s => !string.IsNullOrEmpty(s)).ToList() : new List<string>(),
                            bindings = siteJson.TryGetProperty("Bindings", out var bindingsProp) && bindingsProp.ValueKind == System.Text.Json.JsonValueKind.Array ?
                                bindingsProp.EnumerateArray().Select(binding => binding.GetString() ?? "").Where(s => !string.IsNullOrEmpty(s)).ToList() : new List<string>()
                        };

                        _logger.LogInformation("Site encontrado: {SiteName}, Caminho: {PhysicalPath}", siteName, physicalPath);
                        return (true, "Site encontrado", physicalPath, siteInfo);
                    }
                    catch (System.Text.Json.JsonException ex)
                    {
                        _logger.LogWarning(ex, "Erro ao fazer parse das informa√ß√µes do site. Output: {Output}", siteInfoResult.Output);
                        return (false, $"Erro ao processar informa√ß√µes do site: {ex.Message}", string.Empty, null);
                    }
                }
                finally
                {
                    // Limpar arquivo tempor√°rio
                    try
                    {
                        if (File.Exists(tempScriptPath))
                            File.Delete(tempScriptPath);
                    }
                    catch { /* Ignorar erros de limpeza */ }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao obter informa√ß√µes do site: {SiteName}", siteName);
                return (false, $"Erro interno: {ex.Message}", string.Empty, null);
            }
        }

        /// <summary>
        /// Verifica se existe uma aplica√ß√£o IIS em um caminho espec√≠fico
        /// </summary>
        /// <param name="siteName">Nome do site</param>
        /// <param name="applicationPath">Caminho da aplica√ß√£o (ex: "/api")</param>
        /// <returns>Resultado da verifica√ß√£o</returns>
        public async Task<(bool Success, string Message, bool ApplicationExists, object? ApplicationInfo)> CheckApplicationExistsAsync(string siteName, string applicationPath)
        {
            _logger.LogInformation("Verificando aplica√ß√£o IIS: Site={SiteName}, Path={ApplicationPath}", siteName, applicationPath);

            try
            {
                if (string.IsNullOrWhiteSpace(siteName))
                {
                    return (false, "Nome do site √© obrigat√≥rio", false, null);
                }

                // Normalizar o caminho da aplica√ß√£o
                if (!applicationPath.StartsWith("/"))
                {
                    applicationPath = "/" + applicationPath;
                }

                // Criar script PowerShell para verificar aplica√ß√£o
                var tempScriptPath = Path.Combine(Path.GetTempPath(), $"check_application_{Guid.NewGuid()}.ps1");
                var powershellScript = $@"
$site = Get-IISSite -Name '{siteName}' -ErrorAction SilentlyContinue

if (-not $site) {{
    Write-Output ""SITE_NOT_FOUND""
    exit 1
}}

$application = $site.Applications | Where-Object {{ $_.Path -eq '{applicationPath}' }} | Select-Object -First 1

if (-not $application) {{
    Write-Output ""APPLICATION_NOT_FOUND""
    exit 0
}}

$physicalPath = 'Path Not Available'
try {{
    $rootVDir = $application.VirtualDirectories | Where-Object {{ $_.Path -eq '/' }} | Select-Object -First 1
    if ($rootVDir -and $rootVDir.PhysicalPath) {{
        $physicalPath = $rootVDir.PhysicalPath
    }}
}} catch {{
    # Keep default value
}}

$appInfo = [PSCustomObject]@{{
    SiteName = '{siteName}'
    Path = $application.Path
    ApplicationPool = $application.ApplicationPoolName
    PhysicalPath = $physicalPath
    EnabledProtocols = $application.EnabledProtocols
}}

$appInfo | ConvertTo-Json -Compress
";

                try
                {
                    // Escrever script tempor√°rio
                    await File.WriteAllTextAsync(tempScriptPath, powershellScript);
                    
                    // Executar script
                    var appsResult = await ExecuteCommandAsync("powershell", 
                        $"-ExecutionPolicy Bypass -File \"{tempScriptPath}\"");

                    if (!appsResult.Success)
                    {
                        return (false, $"Erro ao verificar aplica√ß√µes do site: {appsResult.Message}", false, null);
                    }

                    if (string.IsNullOrWhiteSpace(appsResult.Output))
                    {
                        return (false, "Resposta vazia do comando PowerShell", false, null);
                    }

                    if (appsResult.Output.Contains("SITE_NOT_FOUND"))
                    {
                        return (false, $"Site '{siteName}' n√£o encontrado", false, null);
                    }

                    if (appsResult.Output.Contains("APPLICATION_NOT_FOUND"))
                    {
                        _logger.LogDebug("Aplica√ß√£o n√£o encontrada: {SiteName}{ApplicationPath}", siteName, applicationPath);
                        return (true, "Aplica√ß√£o n√£o existe no IIS", false, null);
                    }

                    try
                    {
                        var appJson = System.Text.Json.JsonSerializer.Deserialize<System.Text.Json.JsonElement>(appsResult.Output);
                        
                        var appInfo = new
                        {
                            siteName = appJson.TryGetProperty("SiteName", out var siteNameProp) ? siteNameProp.GetString() : siteName,
                            path = appJson.TryGetProperty("Path", out var pathProp) ? pathProp.GetString() : applicationPath,
                            applicationPool = appJson.TryGetProperty("ApplicationPool", out var poolProp) ? poolProp.GetString() : "Unknown",
                            physicalPath = appJson.TryGetProperty("PhysicalPath", out var physPathProp) ? physPathProp.GetString() : "Unknown",
                            enabledProtocols = appJson.TryGetProperty("EnabledProtocols", out var protocolsProp) ? protocolsProp.GetString() : "Unknown"
                        };

                        _logger.LogInformation("Aplica√ß√£o IIS encontrada: {SiteName}{ApplicationPath}", siteName, applicationPath);
                        return (true, "Aplica√ß√£o existe no IIS", true, appInfo);
                    }
                    catch (System.Text.Json.JsonException ex)
                    {
                        _logger.LogWarning(ex, "Erro ao fazer parse das informa√ß√µes da aplica√ß√£o. Output: {Output}", appsResult.Output);
                        return (false, $"Erro ao processar informa√ß√µes da aplica√ß√£o: {ex.Message}", false, null);
                    }
                }
                finally
                {
                    // Limpar arquivo tempor√°rio
                    try
                    {
                        if (File.Exists(tempScriptPath))
                            File.Delete(tempScriptPath);
                    }
                    catch { /* Ignorar erros de limpeza */ }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao verificar aplica√ß√£o: {SiteName}{ApplicationPath}", siteName, applicationPath);
                return (false, $"Erro interno: {ex.Message}", false, null);
            }
        }

        /// <summary>
        /// Lista todos os sites IIS dispon√≠veis
        /// </summary>
        /// <returns>Lista de sites</returns>
        public async Task<(bool Success, string Message, List<object> Sites)> GetAllSitesAsync()
        {
            _logger.LogInformation("Listando todos os sites IIS");

            try
            {
                // Criar arquivo PowerShell tempor√°rio para garantir execu√ß√£o correta
                var tempScriptPath = Path.Combine(Path.GetTempPath(), $"get_iis_sites_{Guid.NewGuid()}.ps1");
                var powershellScript = @"
$sites = @()
Get-IISSite | ForEach-Object {
    $site = $_
    $physicalPath = 'Path Not Available'
    
    try {
        $rootApp = $site.Applications | Where-Object { $_.Path -eq '/' } | Select-Object -First 1
        if ($rootApp) {
            $rootVDir = $rootApp.VirtualDirectories | Where-Object { $_.Path -eq '/' } | Select-Object -First 1
            if ($rootVDir -and $rootVDir.PhysicalPath) {
                $physicalPath = $rootVDir.PhysicalPath
            }
        }
    } catch {
        # Keep default value
    }
    
    $siteInfo = [PSCustomObject]@{
        Name = $site.Name
        Id = [int]$site.Id
        State = [int]$site.State
        PhysicalPath = $physicalPath
    }
    $sites += $siteInfo
}

$sites | ConvertTo-Json -Depth 1 -Compress
";

                try
                {
                    // Escrever script tempor√°rio
                    await File.WriteAllTextAsync(tempScriptPath, powershellScript);
                    
                    // Executar script
                    var sitesResult = await ExecuteCommandAsync("powershell", 
                        $"-ExecutionPolicy Bypass -File \"{tempScriptPath}\"");

                    if (!sitesResult.Success)
                    {
                        return (false, sitesResult.Message, new List<object>());
                    }

                    if (string.IsNullOrWhiteSpace(sitesResult.Output))
                    {
                        return (true, "Nenhum site encontrado", new List<object>());
                    }

                    try
                    {
                        _logger.LogDebug("Sa√≠da do comando PowerShell: {Output}", sitesResult.Output);
                        
                        var sitesJson = System.Text.Json.JsonSerializer.Deserialize<System.Text.Json.JsonElement>(sitesResult.Output);
                        var sites = new List<object>();

                        if (sitesJson.ValueKind == System.Text.Json.JsonValueKind.Array)
                        {
                            foreach (var site in sitesJson.EnumerateArray())
                            {
                                sites.Add(CreateSiteObjectFromCleanJson(site));
                            }
                        }
                        else if (sitesJson.ValueKind == System.Text.Json.JsonValueKind.Object)
                        {
                            // Apenas um site
                            sites.Add(CreateSiteObjectFromCleanJson(sitesJson));
                        }

                        _logger.LogInformation("Encontrados {Count} sites IIS", sites.Count);
                        return (true, $"Encontrados {sites.Count} sites", sites);
                    }
                    catch (System.Text.Json.JsonException ex)
                    {
                        _logger.LogWarning(ex, "Erro ao fazer parse da lista de sites. Output: {Output}", sitesResult.Output);
                        return (false, $"Erro ao processar lista de sites: {ex.Message}", new List<object>());
                    }
                }
                finally
                {
                    // Limpar arquivo tempor√°rio
                    try
                    {
                        if (File.Exists(tempScriptPath))
                            File.Delete(tempScriptPath);
                    }
                    catch { /* Ignorar erros de limpeza */ }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao listar sites IIS");
                return (false, $"Erro interno: {ex.Message}", new List<object>());
            }
        }

        /// <summary>
        /// Cria um objeto de site a partir de um JsonElement limpo (gerado pelo nosso script)
        /// </summary>
        /// <param name="siteElement">Elemento JSON do site</param>
        /// <returns>Objeto representando o site</returns>
        private object CreateSiteObjectFromCleanJson(System.Text.Json.JsonElement siteElement)
        {
            try
            {
                return new
                {
                    Name = siteElement.GetProperty("Name").GetString() ?? "Unknown",
                    Id = siteElement.GetProperty("Id").GetInt32(),
                    State = siteElement.GetProperty("State").GetInt32(),
                    PhysicalPath = siteElement.GetProperty("PhysicalPath").GetString() ?? "Unknown"
                };
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Erro ao processar elemento de site individual");
                return new
                {
                    Name = "Error",
                    Id = 0,
                    State = 0,
                    PhysicalPath = $"Error: {ex.Message}"
                };
            }
        }

        /// <summary>
        /// Cria um objeto de site a partir de um JsonElement, tratando diferentes tipos de dados
        /// </summary>
        /// <param name="siteElement">Elemento JSON do site</param>
        /// <returns>Objeto representando o site</returns>
        private object CreateSiteObject(System.Text.Json.JsonElement siteElement)
        {
            try
            {
                // Extrair name de forma segura
                string name = "Unknown";
                if (siteElement.TryGetProperty("Name", out var nameElement))
                {
                    if (nameElement.ValueKind == System.Text.Json.JsonValueKind.String)
                    {
                        name = nameElement.GetString() ?? "Unknown";
                    }
                    else if (nameElement.ValueKind == System.Text.Json.JsonValueKind.Number)
                    {
                        name = nameElement.GetInt32().ToString();
                    }
                }

                // Extrair id de forma segura
                int id = 0;
                if (siteElement.TryGetProperty("Id", out var idElement))
                {
                    if (idElement.ValueKind == System.Text.Json.JsonValueKind.Number)
                    {
                        id = idElement.GetInt32();
                    }
                    else if (idElement.ValueKind == System.Text.Json.JsonValueKind.String && 
                             int.TryParse(idElement.GetString(), out var parsedId))
                    {
                        id = parsedId;
                    }
                }

                // Extrair state de forma segura
                string state = "Unknown";
                if (siteElement.TryGetProperty("State", out var stateElement))
                {
                    if (stateElement.ValueKind == System.Text.Json.JsonValueKind.String)
                    {
                        state = stateElement.GetString() ?? "Unknown";
                    }
                    else if (stateElement.ValueKind == System.Text.Json.JsonValueKind.Number)
                    {
                        state = stateElement.GetInt32().ToString();
                    }
                }

                // Extrair physicalPath de forma segura
                string physicalPath = "Unknown";
                if (siteElement.TryGetProperty("PhysicalPath", out var pathElement))
                {
                    if (pathElement.ValueKind == System.Text.Json.JsonValueKind.String)
                    {
                        physicalPath = pathElement.GetString() ?? "Unknown";
                    }
                    else if (pathElement.ValueKind == System.Text.Json.JsonValueKind.Null)
                    {
                        physicalPath = "Not Available";
                    }
                }

                return new
                {
                    name = name,
                    id = id,
                    state = state,
                    physicalPath = physicalPath
                };
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Erro ao processar elemento de site individual");
                return new
                {
                    name = "Error",
                    id = 0,
                    state = "Error",
                    physicalPath = $"Error: {ex.Message}"
                };
            }
        }

        /// <summary>
        /// Lista todas as aplica√ß√µes de um site espec√≠fico do IIS
        /// </summary>
        /// <param name="siteName">Nome do site</param>
        /// <returns>Lista de aplica√ß√µes do site</returns>
        public async Task<(bool Success, string Message, List<object> Applications)> GetSiteApplicationsAsync(string siteName)
        {
            var tempScriptPath = Path.GetTempFileName() + ".ps1";
            
            try
            {
                _logger.LogInformation("Listando aplica√ß√µes do site: {SiteName}", siteName);

                var powershellScript = $@"
Import-Module WebAdministration -ErrorAction SilentlyContinue

try {{
    $site = Get-IISSite -Name '{siteName}' -ErrorAction Stop
    $applications = @()
    
    # Buscar aplica√ß√µes dentro do site
    $webApps = Get-WebApplication -Site '{siteName}' -ErrorAction SilentlyContinue
    
    foreach ($app in $webApps) {{
        $appInfo = @{{
            name = $app.path
            physicalPath = $app.physicalPath
            enabledProtocols = $app.enabledProtocols
            applicationPool = $app.applicationPool
        }}
        $applications += $appInfo
    }}
    
    $applications | ConvertTo-Json -Depth 2 -Compress
}} catch {{
    Write-Error ""Erro ao listar aplica√ß√µes: $($_.Exception.Message)""
    exit 1
}}
";

                try
                {
                    // Escrever script tempor√°rio
                    await File.WriteAllTextAsync(tempScriptPath, powershellScript);
                    
                    // Executar script
                    var appsResult = await ExecuteCommandAsync("powershell", 
                        $"-ExecutionPolicy Bypass -File \"{tempScriptPath}\"");

                    if (!appsResult.Success)
                    {
                        return (false, appsResult.Message, new List<object>());
                    }

                    if (string.IsNullOrWhiteSpace(appsResult.Output))
                    {
                        return (true, "Nenhuma aplica√ß√£o encontrada", new List<object>());
                    }

                    try
                    {
                        _logger.LogDebug("Sa√≠da do comando PowerShell para aplica√ß√µes: {Output}", appsResult.Output);
                        
                        var appsJson = System.Text.Json.JsonSerializer.Deserialize<System.Text.Json.JsonElement>(appsResult.Output);
                        var applicationsList = new List<object>();

                        if (appsJson.ValueKind == System.Text.Json.JsonValueKind.Array)
                        {
                            foreach (var appElement in appsJson.EnumerateArray())
                            {
                                applicationsList.Add(ParseApplicationElement(appElement));
                            }
                        }
                        else if (appsJson.ValueKind == System.Text.Json.JsonValueKind.Object)
                        {
                            // Caso seja apenas uma aplica√ß√£o
                            applicationsList.Add(ParseApplicationElement(appsJson));
                        }

                        _logger.LogInformation("Encontradas {Count} aplica√ß√µes no site {SiteName}", 
                            applicationsList.Count, siteName);
                        
                        return (true, $"Aplica√ß√µes listadas com sucesso", applicationsList);
                    }
                    catch (System.Text.Json.JsonException ex)
                    {
                        _logger.LogError(ex, "Erro ao fazer parse do JSON das aplica√ß√µes: {Output}", appsResult.Output);
                        return (false, $"Erro ao processar resposta JSON das aplica√ß√µes: {ex.Message}", new List<object>());
                    }
                }
                finally
                {
                    // Limpar arquivo tempor√°rio
                    try
                    {
                        if (File.Exists(tempScriptPath))
                        {
                            File.Delete(tempScriptPath);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogWarning(ex, "Erro ao limpar arquivo tempor√°rio: {TempPath}", tempScriptPath);
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao listar aplica√ß√µes do site: {SiteName}", siteName);
                return (false, ex.Message, new List<object>());
            }
        }

        private object ParseApplicationElement(System.Text.Json.JsonElement appElement)
        {
            try
            {
                var name = appElement.GetProperty("name").GetString() ?? "";
                var physicalPath = appElement.GetProperty("physicalPath").GetString() ?? "";
                var enabledProtocols = appElement.GetProperty("enabledProtocols").GetString() ?? "";
                var applicationPool = appElement.GetProperty("applicationPool").GetString() ?? "";

                return new
                {
                    Name = name,
                    PhysicalPath = physicalPath,
                    EnabledProtocols = enabledProtocols,
                    ApplicationPool = applicationPool
                };
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Erro ao processar elemento de aplica√ß√£o individual");
                return new
                {
                    Name = "Error",
                    PhysicalPath = $"Error: {ex.Message}",
                    EnabledProtocols = "Error",
                    ApplicationPool = "Error"
                };
            }
        }

        #region CRUD - Sites

        /// <summary>
        /// Cria um novo site no IIS
        /// </summary>
        public async Task<IISOperationResult> CreateSiteAsync(CreateSiteRequest request)
        {
            _logger.LogInformation("Criando site IIS: {SiteName}", request.SiteName);

            try
            {
                using var serverManager = new ServerManager();

                // Verificar se o site j√° existe
                var existingSite = serverManager.Sites.FirstOrDefault(s => s.Name.Equals(request.SiteName, StringComparison.OrdinalIgnoreCase));
                if (existingSite != null)
                {
                    return new IISOperationResult
                    {
                        Success = false,
                        Message = $"Site '{request.SiteName}' j√° existe",
                        Errors = { "Site com este nome j√° foi criado" }
                    };
                }

                // Verificar se a porta est√° em uso
                var portInUse = serverManager.Sites.Any(s => s.Bindings.Any(b => b.EndPoint?.Port.ToString() == ExtractPortFromBinding(request.BindingInformation)));
                if (portInUse)
                {
                    return new IISOperationResult
                    {
                        Success = false,
                        Message = $"Porta especificada j√° est√° em uso",
                        Errors = { "A porta do binding j√° est√° sendo utilizada por outro site" }
                    };
                }

                // Criar diret√≥rio f√≠sico se n√£o existir
                if (!Directory.Exists(request.PhysicalPath))
                {
                    Directory.CreateDirectory(request.PhysicalPath);
                    _logger.LogInformation("Diret√≥rio f√≠sico criado: {PhysicalPath}", request.PhysicalPath);
                }

                // Verificar se o Application Pool existe
                var appPool = serverManager.ApplicationPools.FirstOrDefault(ap => ap.Name.Equals(request.AppPoolName, StringComparison.OrdinalIgnoreCase));
                if (appPool == null)
                {
                    // Criar Application Pool se n√£o existir
                    appPool = serverManager.ApplicationPools.Add(request.AppPoolName);
                    appPool.ManagedRuntimeVersion = "v4.0";
                    appPool.ProcessModel.PipelineMode = ManagedPipelineMode.Integrated;
                    _logger.LogInformation("Application Pool criado: {AppPoolName}", request.AppPoolName);
                }

                // Criar o site
                var site = serverManager.Sites.Add(request.SiteName, request.PhysicalPath, ExtractPortFromBinding(request.BindingInformation));
                site.Applications[0].ApplicationPoolName = request.AppPoolName;

                // Configurar binding personalizado se necess√°rio
                if (!string.IsNullOrWhiteSpace(request.BindingInformation) && request.BindingInformation != "*:80:")
                {
                    site.Bindings.Clear();
                    site.Bindings.Add(request.BindingInformation, "http");
                }

                serverManager.CommitChanges();

                _logger.LogInformation("Site IIS criado com sucesso: {SiteName}", request.SiteName);

                return new IISOperationResult
                {
                    Success = true,
                    Message = $"Site '{request.SiteName}' criado com sucesso",
                    Data = new
                    {
                        SiteName = request.SiteName,
                        Id = site.Id,
                        PhysicalPath = request.PhysicalPath,
                        AppPoolName = request.AppPoolName,
                        Binding = request.BindingInformation
                    }
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao criar site IIS: {SiteName}", request.SiteName);
                return new IISOperationResult
                {
                    Success = false,
                    Message = "Erro interno ao criar site",
                    Errors = { ex.Message }
                };
            }
        }

        /// <summary>
        /// Atualiza um site existente no IIS
        /// </summary>
        public async Task<IISOperationResult> UpdateSiteAsync(string siteName, UpdateSiteRequest request)
        {
            _logger.LogInformation("Atualizando site IIS: {SiteName}", siteName);

            try
            {
                using var serverManager = new ServerManager();

                var site = serverManager.Sites.FirstOrDefault(s => s.Name.Equals(siteName, StringComparison.OrdinalIgnoreCase));
                if (site == null)
                {
                    return new IISOperationResult
                    {
                        Success = false,
                        Message = $"Site '{siteName}' n√£o encontrado",
                        Errors = { "Site especificado n√£o existe" }
                    };
                }

                // Atualizar PhysicalPath se fornecido
                if (!string.IsNullOrWhiteSpace(request.PhysicalPath))
                {
                    // Criar diret√≥rio se n√£o existir
                    if (!Directory.Exists(request.PhysicalPath))
                    {
                        Directory.CreateDirectory(request.PhysicalPath);
                    }

                    foreach (var app in site.Applications)
                    {
                        foreach (var vdir in app.VirtualDirectories)
                        {
                            if (vdir.Path == "/")
                            {
                                vdir.PhysicalPath = request.PhysicalPath;
                                break;
                            }
                        }
                    }
                }

                // Atualizar Bindings se fornecido
                if (request.Bindings != null && request.Bindings.Any())
                {
                    site.Bindings.Clear();
                    foreach (var binding in request.Bindings)
                    {
                        site.Bindings.Add(binding.BindingInformation, binding.Protocol);
                    }
                }

                serverManager.CommitChanges();

                _logger.LogInformation("Site IIS atualizado com sucesso: {SiteName}", siteName);

                return new IISOperationResult
                {
                    Success = true,
                    Message = $"Site '{siteName}' atualizado com sucesso",
                    Data = await GetDetailedSiteInfoAsync(siteName)
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao atualizar site IIS: {SiteName}", siteName);
                return new IISOperationResult
                {
                    Success = false,
                    Message = "Erro interno ao atualizar site",
                    Errors = { ex.Message }
                };
            }
        }

        /// <summary>
        /// Remove um site do IIS
        /// </summary>
        public async Task<IISOperationResult> DeleteSiteAsync(string siteName)
        {
            _logger.LogInformation("Removendo site IIS: {SiteName}", siteName);

            try
            {
                using var serverManager = new ServerManager();

                var site = serverManager.Sites.FirstOrDefault(s => s.Name.Equals(siteName, StringComparison.OrdinalIgnoreCase));
                if (site == null)
                {
                    return new IISOperationResult
                    {
                        Success = false,
                        Message = $"Site '{siteName}' n√£o encontrado",
                        Errors = { "Site especificado n√£o existe" }
                    };
                }

                // Parar o site antes de remover
                if (site.State == ObjectState.Started)
                {
                    site.Stop();
                    _logger.LogInformation("Site parado: {SiteName}", siteName);
                }

                // Remover o site
                serverManager.Sites.Remove(site);
                serverManager.CommitChanges();

                _logger.LogInformation("Site IIS removido com sucesso: {SiteName}", siteName);

                return new IISOperationResult
                {
                    Success = true,
                    Message = $"Site '{siteName}' removido com sucesso"
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao remover site IIS: {SiteName}", siteName);
                return new IISOperationResult
                {
                    Success = false,
                    Message = "Erro interno ao remover site",
                    Errors = { ex.Message }
                };
            }
        }

        /// <summary>
        /// Lista todos os sites do IIS com informa√ß√µes detalhadas
        /// </summary>
        public async Task<IISOperationResult> GetAllDetailedSitesAsync()
        {
            _logger.LogInformation("Listando todos os sites IIS com detalhes");

            try
            {
                using var serverManager = new ServerManager();

                var sites = new List<DetailedSiteInfo>();

                foreach (var site in serverManager.Sites)
                {
                    var siteInfo = new DetailedSiteInfo
                    {
                        Name = site.Name,
                        Id = (int)site.Id,
                        State = site.State.ToString(),
                        AppPoolName = site.Applications[0]?.ApplicationPoolName ?? "N/A"
                    };

                    // Physical Path
                    var rootApp = site.Applications.FirstOrDefault(a => a.Path == "/");
                    if (rootApp != null)
                    {
                        var rootVDir = rootApp.VirtualDirectories.FirstOrDefault(v => v.Path == "/");
                        siteInfo.PhysicalPath = rootVDir?.PhysicalPath ?? "N/A";
                    }

                    // Bindings
                    siteInfo.Bindings = site.Bindings.Select(b => new SiteBinding
                    {
                        Protocol = b.Protocol,
                        IpAddress = b.EndPoint?.Address?.ToString() ?? "*",
                        Port = b.EndPoint?.Port ?? 80,
                        HostName = b.Host ?? ""
                    }).ToList();

                    // Applications
                    siteInfo.Applications = site.Applications.Select(app => new ApplicationInfo
                    {
                        Name = app.Path,
                        PhysicalPath = app.VirtualDirectories.FirstOrDefault()?.PhysicalPath ?? "N/A",
                        EnabledProtocols = app.EnabledProtocols ?? "http",
                        ApplicationPool = app.ApplicationPoolName ?? "N/A"
                    }).ToList();

                    sites.Add(siteInfo);
                }

                return new IISOperationResult
                {
                    Success = true,
                    Message = $"Encontrados {sites.Count} sites",
                    Data = sites
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao listar sites IIS");
                return new IISOperationResult
                {
                    Success = false,
                    Message = "Erro interno ao listar sites",
                    Errors = { ex.Message }
                };
            }
        }

        /// <summary>
        /// Obt√©m informa√ß√µes detalhadas de um site espec√≠fico
        /// </summary>
        public async Task<DetailedSiteInfo?> GetDetailedSiteInfoAsync(string siteName)
        {
            try
            {
                using var serverManager = new ServerManager();

                var site = serverManager.Sites.FirstOrDefault(s => s.Name.Equals(siteName, StringComparison.OrdinalIgnoreCase));
                if (site == null) return null;

                var siteInfo = new DetailedSiteInfo
                {
                    Name = site.Name,
                    Id = (int)site.Id,
                    State = site.State.ToString(),
                    AppPoolName = site.Applications[0]?.ApplicationPoolName ?? "N/A"
                };

                // Physical Path
                var rootApp = site.Applications.FirstOrDefault(a => a.Path == "/");
                if (rootApp != null)
                {
                    var rootVDir = rootApp.VirtualDirectories.FirstOrDefault(v => v.Path == "/");
                    siteInfo.PhysicalPath = rootVDir?.PhysicalPath ?? "N/A";
                }

                // Bindings
                siteInfo.Bindings = site.Bindings.Select(b => new SiteBinding
                {
                    Protocol = b.Protocol,
                    IpAddress = b.EndPoint?.Address?.ToString() ?? "*",
                    Port = b.EndPoint?.Port ?? 80,
                    HostName = b.Host ?? ""
                }).ToList();

                // Applications
                siteInfo.Applications = site.Applications.Select(app => new ApplicationInfo
                {
                    Name = app.Path,
                    PhysicalPath = app.VirtualDirectories.FirstOrDefault()?.PhysicalPath ?? "N/A",
                    EnabledProtocols = app.EnabledProtocols ?? "http",
                    ApplicationPool = app.ApplicationPoolName ?? "N/A"
                }).ToList();

                return siteInfo;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao obter informa√ß√µes detalhadas do site: {SiteName}", siteName);
                return null;
            }
        }

        #endregion

        #region CRUD - Applications

        /// <summary>
        /// Adiciona uma aplica√ß√£o a um site existente
        /// </summary>
        public async Task<IISOperationResult> CreateApplicationAsync(CreateApplicationRequest request)
        {
            _logger.LogInformation("Criando aplica√ß√£o: {SiteName}/{AppPath}", request.SiteName, request.AppPath);

            try
            {
                using var serverManager = new ServerManager();

                var site = serverManager.Sites.FirstOrDefault(s => s.Name.Equals(request.SiteName, StringComparison.OrdinalIgnoreCase));
                if (site == null)
                {
                    return new IISOperationResult
                    {
                        Success = false,
                        Message = $"Site '{request.SiteName}' n√£o encontrado",
                        Errors = { "Site especificado n√£o existe" }
                    };
                }

                // Verificar se a aplica√ß√£o j√° existe
                var existingApp = site.Applications.FirstOrDefault(a => a.Path.Equals(request.AppPath, StringComparison.OrdinalIgnoreCase));
                if (existingApp != null)
                {
                    return new IISOperationResult
                    {
                        Success = false,
                        Message = $"Aplica√ß√£o '{request.AppPath}' j√° existe no site '{request.SiteName}'",
                        Errors = { "Aplica√ß√£o com este caminho j√° foi criada" }
                    };
                }

                // Criar diret√≥rio f√≠sico se n√£o existir
                if (!Directory.Exists(request.PhysicalPath))
                {
                    Directory.CreateDirectory(request.PhysicalPath);
                    _logger.LogInformation("Diret√≥rio f√≠sico criado: {PhysicalPath}", request.PhysicalPath);
                }

                // Verificar se o Application Pool existe
                var appPool = serverManager.ApplicationPools.FirstOrDefault(ap => ap.Name.Equals(request.AppPoolName, StringComparison.OrdinalIgnoreCase));
                if (appPool == null)
                {
                    return new IISOperationResult
                    {
                        Success = false,
                        Message = $"Application Pool '{request.AppPoolName}' n√£o encontrado",
                        Errors = { "Application Pool especificado n√£o existe" }
                    };
                }

                // Criar a aplica√ß√£o
                var application = site.Applications.Add(request.AppPath, request.PhysicalPath);
                application.ApplicationPoolName = request.AppPoolName;

                serverManager.CommitChanges();

                _logger.LogInformation("Aplica√ß√£o criada com sucesso: {SiteName}/{AppPath}", request.SiteName, request.AppPath);

                return new IISOperationResult
                {
                    Success = true,
                    Message = $"Aplica√ß√£o '{request.AppPath}' criada com sucesso no site '{request.SiteName}'",
                    Data = new ApplicationInfo
                    {
                        Name = request.AppPath,
                        PhysicalPath = request.PhysicalPath,
                        ApplicationPool = request.AppPoolName,
                        EnabledProtocols = "http"
                    }
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao criar aplica√ß√£o: {SiteName}/{AppPath}", request.SiteName, request.AppPath);
                return new IISOperationResult
                {
                    Success = false,
                    Message = "Erro interno ao criar aplica√ß√£o",
                    Errors = { ex.Message }
                };
            }
        }

        /// <summary>
        /// Atualiza uma aplica√ß√£o existente
        /// </summary>
        public async Task<IISOperationResult> UpdateApplicationAsync(string siteName, string appPath, UpdateApplicationRequest request)
        {
            _logger.LogInformation("Atualizando aplica√ß√£o: {SiteName}/{AppPath}", siteName, appPath);

            try
            {
                using var serverManager = new ServerManager();

                var site = serverManager.Sites.FirstOrDefault(s => s.Name.Equals(siteName, StringComparison.OrdinalIgnoreCase));
                if (site == null)
                {
                    return new IISOperationResult
                    {
                        Success = false,
                        Message = $"Site '{siteName}' n√£o encontrado",
                        Errors = { "Site especificado n√£o existe" }
                    };
                }

                var application = site.Applications.FirstOrDefault(a => a.Path.Equals(appPath, StringComparison.OrdinalIgnoreCase));
                if (application == null)
                {
                    return new IISOperationResult
                    {
                        Success = false,
                        Message = $"Aplica√ß√£o '{appPath}' n√£o encontrada no site '{siteName}'",
                        Errors = { "Aplica√ß√£o especificada n√£o existe" }
                    };
                }

                // Atualizar PhysicalPath se fornecido
                if (!string.IsNullOrWhiteSpace(request.PhysicalPath))
                {
                    if (!Directory.Exists(request.PhysicalPath))
                    {
                        Directory.CreateDirectory(request.PhysicalPath);
                    }

                    var vdir = application.VirtualDirectories.FirstOrDefault(v => v.Path == "/");
                    if (vdir != null)
                    {
                        vdir.PhysicalPath = request.PhysicalPath;
                    }
                }

                // Atualizar AppPool se fornecido
                if (!string.IsNullOrWhiteSpace(request.AppPoolName))
                {
                    var appPool = serverManager.ApplicationPools.FirstOrDefault(ap => ap.Name.Equals(request.AppPoolName, StringComparison.OrdinalIgnoreCase));
                    if (appPool == null)
                    {
                        return new IISOperationResult
                        {
                            Success = false,
                            Message = $"Application Pool '{request.AppPoolName}' n√£o encontrado",
                            Errors = { "Application Pool especificado n√£o existe" }
                        };
                    }

                    application.ApplicationPoolName = request.AppPoolName;
                }

                serverManager.CommitChanges();

                _logger.LogInformation("Aplica√ß√£o atualizada com sucesso: {SiteName}/{AppPath}", siteName, appPath);

                return new IISOperationResult
                {
                    Success = true,
                    Message = $"Aplica√ß√£o '{appPath}' atualizada com sucesso",
                    Data = new ApplicationInfo
                    {
                        Name = application.Path,
                        PhysicalPath = application.VirtualDirectories.FirstOrDefault()?.PhysicalPath ?? "N/A",
                        ApplicationPool = application.ApplicationPoolName,
                        EnabledProtocols = application.EnabledProtocols
                    }
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao atualizar aplica√ß√£o: {SiteName}/{AppPath}", siteName, appPath);
                return new IISOperationResult
                {
                    Success = false,
                    Message = "Erro interno ao atualizar aplica√ß√£o",
                    Errors = { ex.Message }
                };
            }
        }

        /// <summary>
        /// Remove uma aplica√ß√£o de um site
        /// </summary>
        public async Task<IISOperationResult> DeleteApplicationAsync(string siteName, string appPath)
        {
            _logger.LogInformation("Removendo aplica√ß√£o: {SiteName}/{AppPath}", siteName, appPath);

            try
            {
                using var serverManager = new ServerManager();

                var site = serverManager.Sites.FirstOrDefault(s => s.Name.Equals(siteName, StringComparison.OrdinalIgnoreCase));
                if (site == null)
                {
                    return new IISOperationResult
                    {
                        Success = false,
                        Message = $"Site '{siteName}' n√£o encontrado",
                        Errors = { "Site especificado n√£o existe" }
                    };
                }

                var application = site.Applications.FirstOrDefault(a => a.Path.Equals(appPath, StringComparison.OrdinalIgnoreCase));
                if (application == null)
                {
                    return new IISOperationResult
                    {
                        Success = false,
                        Message = $"Aplica√ß√£o '{appPath}' n√£o encontrada no site '{siteName}'",
                        Errors = { "Aplica√ß√£o especificada n√£o existe" }
                    };
                }

                // N√£o permitir remo√ß√£o da aplica√ß√£o raiz
                if (appPath == "/")
                {
                    return new IISOperationResult
                    {
                        Success = false,
                        Message = "N√£o √© poss√≠vel remover a aplica√ß√£o raiz do site",
                        Errors = { "A aplica√ß√£o raiz (/) n√£o pode ser removida" }
                    };
                }

                site.Applications.Remove(application);
                serverManager.CommitChanges();

                _logger.LogInformation("Aplica√ß√£o removida com sucesso: {SiteName}/{AppPath}", siteName, appPath);

                return new IISOperationResult
                {
                    Success = true,
                    Message = $"Aplica√ß√£o '{appPath}' removida com sucesso do site '{siteName}'"
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao remover aplica√ß√£o: {SiteName}/{AppPath}", siteName, appPath);
                return new IISOperationResult
                {
                    Success = false,
                    Message = "Erro interno ao remover aplica√ß√£o",
                    Errors = { ex.Message }
                };
            }
        }

        /// <summary>
        /// Lista todas as aplica√ß√µes de um site espec√≠fico
        /// </summary>
        public async Task<IISOperationResult> GetSiteApplicationsAsync(string siteName)
        {
            _logger.LogInformation("Listando aplica√ß√µes do site: {SiteName}", siteName);

            try
            {
                using var serverManager = new ServerManager();

                var site = serverManager.Sites.FirstOrDefault(s => s.Name.Equals(siteName, StringComparison.OrdinalIgnoreCase));
                if (site == null)
                {
                    return new IISOperationResult
                    {
                        Success = false,
                        Message = $"Site '{siteName}' n√£o encontrado",
                        Errors = { "Site especificado n√£o existe" }
                    };
                }

                var applications = site.Applications.Select(app => new ApplicationInfo
                {
                    Name = app.Path,
                    PhysicalPath = app.VirtualDirectories.FirstOrDefault()?.PhysicalPath ?? "N/A",
                    EnabledProtocols = app.EnabledProtocols ?? "http",
                    ApplicationPool = app.ApplicationPoolName ?? "N/A"
                }).ToList();

                return new IISOperationResult
                {
                    Success = true,
                    Message = $"Encontradas {applications.Count} aplica√ß√µes no site '{siteName}'",
                    Data = applications
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao listar aplica√ß√µes do site: {SiteName}", siteName);
                return new IISOperationResult
                {
                    Success = false,
                    Message = "Erro interno ao listar aplica√ß√µes",
                    Errors = { ex.Message }
                };
            }
        }

        #endregion

        #region CRUD - Application Pools

        /// <summary>
        /// Cria um novo Application Pool
        /// </summary>
        public async Task<IISOperationResult> CreateAppPoolAsync(CreateAppPoolRequest request)
        {
            _logger.LogInformation("Criando Application Pool: {PoolName}", request.PoolName);

            try
            {
                using var serverManager = new ServerManager();

                // Verificar se o Application Pool j√° existe
                var existingPool = serverManager.ApplicationPools.FirstOrDefault(ap => ap.Name.Equals(request.PoolName, StringComparison.OrdinalIgnoreCase));
                if (existingPool != null)
                {
                    return new IISOperationResult
                    {
                        Success = false,
                        Message = $"Application Pool '{request.PoolName}' j√° existe",
                        Errors = { "Application Pool com este nome j√° foi criado" }
                    };
                }

                // Criar o Application Pool
                var appPool = serverManager.ApplicationPools.Add(request.PoolName);
                appPool.ManagedRuntimeVersion = request.RuntimeVersion;
                
                // Configurar Pipeline Mode
                if (request.PipelineMode.Equals("Classic", StringComparison.OrdinalIgnoreCase))
                {
                    appPool.ProcessModel.PipelineMode = ManagedPipelineMode.Classic;
                }
                else
                {
                    appPool.ProcessModel.PipelineMode = ManagedPipelineMode.Integrated;
                }

                serverManager.CommitChanges();

                _logger.LogInformation("Application Pool criado com sucesso: {PoolName}", request.PoolName);

                return new IISOperationResult
                {
                    Success = true,
                    Message = $"Application Pool '{request.PoolName}' criado com sucesso",
                    Data = new AppPoolInfo
                    {
                        Name = request.PoolName,
                        State = appPool.State.ToString(),
                        RuntimeVersion = request.RuntimeVersion,
                        PipelineMode = request.PipelineMode,
                        Enable32BitAppOnWin64 = appPool.Enable32BitAppOnWin64,
                        IdleTimeout = (int)appPool.ProcessModel.IdleTimeout.TotalMinutes
                    }
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao criar Application Pool: {PoolName}", request.PoolName);
                return new IISOperationResult
                {
                    Success = false,
                    Message = "Erro interno ao criar Application Pool",
                    Errors = { ex.Message }
                };
            }
        }

        /// <summary>
        /// Atualiza um Application Pool existente
        /// </summary>
        public async Task<IISOperationResult> UpdateAppPoolAsync(string poolName, UpdateAppPoolRequest request)
        {
            _logger.LogInformation("Atualizando Application Pool: {PoolName}", poolName);

            try
            {
                using var serverManager = new ServerManager();

                var appPool = serverManager.ApplicationPools.FirstOrDefault(ap => ap.Name.Equals(poolName, StringComparison.OrdinalIgnoreCase));
                if (appPool == null)
                {
                    return new IISOperationResult
                    {
                        Success = false,
                        Message = $"Application Pool '{poolName}' n√£o encontrado",
                        Errors = { "Application Pool especificado n√£o existe" }
                    };
                }

                // Atualizar Runtime Version se fornecido
                if (!string.IsNullOrWhiteSpace(request.RuntimeVersion))
                {
                    appPool.ManagedRuntimeVersion = request.RuntimeVersion;
                }

                // Atualizar Pipeline Mode se fornecido
                if (!string.IsNullOrWhiteSpace(request.PipelineMode))
                {
                    if (request.PipelineMode.Equals("Classic", StringComparison.OrdinalIgnoreCase))
                    {
                        appPool.ProcessModel.PipelineMode = ManagedPipelineMode.Classic;
                    }
                    else
                    {
                        appPool.ProcessModel.PipelineMode = ManagedPipelineMode.Integrated;
                    }
                }

                // Atualizar outras configura√ß√µes se fornecidas
                if (request.Enable32BitAppOnWin64.HasValue)
                {
                    appPool.Enable32BitAppOnWin64 = request.Enable32BitAppOnWin64.Value;
                }

                if (request.IdleTimeout.HasValue)
                {
                    appPool.ProcessModel.IdleTimeout = TimeSpan.FromMinutes(request.IdleTimeout.Value);
                }

                serverManager.CommitChanges();

                _logger.LogInformation("Application Pool atualizado com sucesso: {PoolName}", poolName);

                return new IISOperationResult
                {
                    Success = true,
                    Message = $"Application Pool '{poolName}' atualizado com sucesso",
                    Data = new AppPoolInfo
                    {
                        Name = appPool.Name,
                        State = appPool.State.ToString(),
                        RuntimeVersion = appPool.ManagedRuntimeVersion,
                        PipelineMode = appPool.ProcessModel.PipelineMode.ToString(),
                        Enable32BitAppOnWin64 = appPool.Enable32BitAppOnWin64,
                        IdleTimeout = (int)appPool.ProcessModel.IdleTimeout.TotalMinutes
                    }
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao atualizar Application Pool: {PoolName}", poolName);
                return new IISOperationResult
                {
                    Success = false,
                    Message = "Erro interno ao atualizar Application Pool",
                    Errors = { ex.Message }
                };
            }
        }

        /// <summary>
        /// Remove um Application Pool (apenas se n√£o estiver em uso)
        /// </summary>
        public async Task<IISOperationResult> DeleteAppPoolAsync(string poolName)
        {
            _logger.LogInformation("Removendo Application Pool: {PoolName}", poolName);

            try
            {
                using var serverManager = new ServerManager();

                var appPool = serverManager.ApplicationPools.FirstOrDefault(ap => ap.Name.Equals(poolName, StringComparison.OrdinalIgnoreCase));
                if (appPool == null)
                {
                    return new IISOperationResult
                    {
                        Success = false,
                        Message = $"Application Pool '{poolName}' n√£o encontrado",
                        Errors = { "Application Pool especificado n√£o existe" }
                    };
                }

                // Verificar se est√° sendo usado por algum site ou aplica√ß√£o
                var usedBy = new List<string>();
                foreach (var site in serverManager.Sites)
                {
                    foreach (var app in site.Applications)
                    {
                        if (app.ApplicationPoolName.Equals(poolName, StringComparison.OrdinalIgnoreCase))
                        {
                            usedBy.Add($"{site.Name}{app.Path}");
                        }
                    }
                }

                if (usedBy.Any())
                {
                    return new IISOperationResult
                    {
                        Success = false,
                        Message = $"Application Pool '{poolName}' est√° sendo usado e n√£o pode ser removido",
                        Errors = { $"Usado por: {string.Join(", ", usedBy)}" }
                    };
                }

                // Parar o Application Pool antes de remover
                if (appPool.State == ObjectState.Started)
                {
                    appPool.Stop();
                    _logger.LogInformation("Application Pool parado: {PoolName}", poolName);
                }

                serverManager.ApplicationPools.Remove(appPool);
                serverManager.CommitChanges();

                _logger.LogInformation("Application Pool removido com sucesso: {PoolName}", poolName);

                return new IISOperationResult
                {
                    Success = true,
                    Message = $"Application Pool '{poolName}' removido com sucesso"
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao remover Application Pool: {PoolName}", poolName);
                return new IISOperationResult
                {
                    Success = false,
                    Message = "Erro interno ao remover Application Pool",
                    Errors = { ex.Message }
                };
            }
        }

        /// <summary>
        /// Lista todos os Application Pools com informa√ß√µes detalhadas
        /// </summary>
        public async Task<IISOperationResult> GetAllAppPoolsAsync()
        {
            _logger.LogInformation("Listando todos os Application Pools");

            try
            {
                using var serverManager = new ServerManager();

                var appPools = new List<AppPoolInfo>();

                foreach (var appPool in serverManager.ApplicationPools)
                {
                    var poolInfo = new AppPoolInfo
                    {
                        Name = appPool.Name,
                        State = appPool.State.ToString(),
                        RuntimeVersion = appPool.ManagedRuntimeVersion,
                        PipelineMode = appPool.ProcessModel.PipelineMode.ToString(),
                        Enable32BitAppOnWin64 = appPool.Enable32BitAppOnWin64,
                        IdleTimeout = (int)appPool.ProcessModel.IdleTimeout.TotalMinutes
                    };

                    // Encontrar sites e aplica√ß√µes que usam este pool
                    var associatedSites = new List<string>();
                    var associatedApplications = new List<string>();

                    foreach (var site in serverManager.Sites)
                    {
                        foreach (var app in site.Applications)
                        {
                            if (app.ApplicationPoolName.Equals(appPool.Name, StringComparison.OrdinalIgnoreCase))
                            {
                                if (app.Path == "/")
                                {
                                    associatedSites.Add(site.Name);
                                }
                                else
                                {
                                    associatedApplications.Add($"{site.Name}{app.Path}");
                                }
                            }
                        }
                    }

                    poolInfo.AssociatedSites = associatedSites;
                    poolInfo.AssociatedApplications = associatedApplications;

                    appPools.Add(poolInfo);
                }

                return new IISOperationResult
                {
                    Success = true,
                    Message = $"Encontrados {appPools.Count} Application Pools",
                    Data = appPools
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Erro ao listar Application Pools");
                return new IISOperationResult
                {
                    Success = false,
                    Message = "Erro interno ao listar Application Pools",
                    Errors = { ex.Message }
                };
            }
        }

        #endregion
    }
}
